import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import api from '../storiesAPI';

const { getCommentsForAStory } = api;

interface Comment {
    by: string;
    id: number;
    kids: Array<number>;
    parent: number;
    text: string;
    time: number;
    type: "comment";
};

type commentsForAStory = {
    comments: Array<Comment>;
    loadingStatus: 'idle' | 'loading' | 'failed' | 'succeeded';
    error: string;
};

export interface CommentsState {
    comments: {
        [key:string]: commentsForAStory,
    };
};

const initialState: CommentsState = {
    comments: {},
};

interface asyncFunctionParam {
    commentIds: number[];
    noOfComments: number;
    storyId: number;
};

export const getCommentsForAStoryAsync = createAsyncThunk(
    'story/commentsForAStory',
    async (param: asyncFunctionParam) => {
      const response = await getCommentsForAStory(param.commentIds, param.noOfComments, param.storyId);

      if (response.error) {
          return response.error;
      }
      // The value we return becomes the `fulfilled` action payload
      return response.comments || [];
    }
);

export const commentSlice = createSlice({
    name: 'commentsForAStory',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        initializeCommentsForAStory: (state, action: PayloadAction<number>) => {
            state.comments = {
                ...state.comments,
                [action.payload.toString()]: {
                    comments: [] as Array<Comment>,
                    loadingStatus: 'idle',
                    error: '',
                },
            };
        },
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
      builder
        .addCase(getCommentsForAStoryAsync.pending, (state, action) => {
            state.comments = {
                ...state.comments,
                [action.meta.arg.toString()]: {
                    loadingStatus: 'loading',
                    comments: [] as Array<Comment>,
                    error: '',
                },
            };
        })
        .addCase(getCommentsForAStoryAsync.fulfilled, (state, action) => {
            state.comments = {
                ...state.comments,
                [action.meta.arg.storyId.toString()]: {
                    loadingStatus: 'succeeded',
                    comments: [...action.payload],
                    error: '',
                },
            };
        })
        .addCase(getCommentsForAStoryAsync.rejected, (state, action) => {
            state.comments = {
                ...state.comments,
                [action.meta.arg.storyId.toString()]: {
                    loadingStatus: 'failed',
                    comments: [] as Array<Comment>,
                    error: action.error.message || 'Something went wrong',
                },
            };
          });
    },
});

export const { initializeCommentsForAStory } = commentSlice.actions;
  
export default commentSlice.reducer;
